import scala.concurrent.ExecutionContext.Implicits.global

import scala.concurrent.{Await, Future}
import scala.concurrent.duration._
import slick.jdbc.PostgresProfile.api._

import phoenix.models._
import phoenix.models.activity.ActivityContext
import phoenix.models.account.{AccountAccessMethod, Scope, Scopes}
import phoenix.services.account.AccountCreateContext
import phoenix.services.Authenticator
import phoenix.utils.FoxConfig
import utils.db._

final implicit class ConsoleEnrichedFuture[A](val future: Future[A]) extends AnyVal {
  def get(): A = Await.result(future, 1.minute)
}


val (_, config: com.typesafe.config.Config) = FoxConfig.loadConfigWithEnv().get
implicit val db = Database.forConfig("db", config)

val customerCreateContext        = AccountCreateContext(List("admin"), "tenant", 1)

implicit val userAuth: Authenticator.UserAuthenticator = Authenticator.forUser(customerCreateContext)
val scopeId = 1

val scope: Scope = Scopes.findOneById(scopeId).run().get()
    .getOrElse(throw new RuntimeException(s"Unable to find a scope with id $scopeId"))

implicit val ac = ActivityContext(userId = 1, userType = "admin",
    transactionId = utils.generateUuid, scope = scope.ltree)

