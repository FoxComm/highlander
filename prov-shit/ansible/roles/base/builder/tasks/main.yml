---

- name: Upload Agent install script
  copy: src="agent_core.sh" dest="{{home}}/agent_core.sh" mode=0755

- name: Execute agent setup
  shell: "{{home}}/agent_core.sh"

- name: Install Babel globally
  shell: npm install babel-cli -g

- name: Install Gulp globally
  shell: npm install gulp -g

- name: Install Lein for clojure
  shell: 'bash -c "cd /usr/local/bin && wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein && chmod +x lein"'

- name: Install Boot for Clojure
  shell: 'bash -c "cd /usr/local/bin && curl -fsSLo boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && chmod 755 boot"'
  args:
      creates: "/usr/local/bin/boot"

- name: Install Flow
  copy: src="flow" dest="/usr/local/bin/flow" mode="u=rwx,g=rwx,o=rx"

- name: Restart Buildkite Agent
  command: systemctl restart buildkite-agent
  tags: buildkite

- name: Make sure buildkite keys are available.
  file: path="/var/lib/buildkite-agent/.ssh/id_rsa" owner=buildkite-agent group=buildkite-agent mode="600"
  tags: buildkite

- name: Install Packages for Isaac
  apt: name={{ item }} state=latest force=yes
  with_items:
    - cmake
    - libboost-all-dev
    - libbotan1.10-dev
    - libsnappy-dev
    - libpqxx-dev
  tags: isaac

- name: Get Proxygen
  git: repo=https://github.com/facebook/proxygen.git dest={{proxygen_install_dir}} version={{proxygen_version}} force=yes
  tags: isaac

- name: Get Folly
  git: repo=https://github.com/facebook/folly.git dest={{folly_install_dir}} version={{folly_version}} force=yes
  tags: isaac

- name: Get Wangle
  git: repo=https://github.com/facebook/wangle.git dest={{wangle_install_dir}} version={{wangle_version}} force=yes
  tags: isaac

- name: Remove `git checkout master` from Proxygen Build Script
  lineinfile: dest={{proxygen_install_dir}}/proxygen/deps.sh state=absent regexp="checkout master"
  tags: isaac

- name: Build Proxygen
  shell: ./deps.sh && ./reinstall.sh
  args:
    chdir: "{{proxygen_install_dir}}/proxygen"
  tags: isaac

- name: Create GOPATH Directories
  file: path={{home}}/go state=directory
  tags: golang

- name: Create GOPATH Directories
  file: path={{home}}/go/src state=directory
  tags: golang

- name: Create GOPATH Directories
  file: path={{home}}/go/bin state=directory
  tags: golang

- name: Add Glide repository
  apt_repository: repo='ppa:masterminds/glide' update_cache=yes
  tags: golang

- name: Install Glide
  apt: name={{ item }} state=latest force=yes
  with_items:
    - glide
  tags: golang

- name: Remove Preinstalled Ansible
  command: pip uninstall -y ansible
  tags: ansible
  ignore_errors: yes

- name: Install Ansible 2.x.x
  command: pip install ansible==2.2.0
  tags: ansible

- name: Install Package for Ansible Lint
  apt: name=libffi-dev state=latest force=yes
  tags: ansible-lint

- name: Install ansible-lint
  pip: name=ansible-lint
  tags: ansible-lint

- name: Download vagrant
  get_url: url={{vagrant_download_url}} dest="{{home}}/{{vagrant_filename}}"
  tags: vagrant

- name: Install vagrant
  shell: dpkg -i {{home}}/{{vagrant_filename}}
  tags: vagrant

- name: Cleanup vagrant deb package
  file: path={{home}}/{{vagrant_filename}} state=absent
  tags: vagrant

- name: Install vagrant google plugin
  shell: vagrant plugin install vagrant-google
  tags: vagrant

- name: Download vagrant google box
  shell: vagrant box add gce {{vagrant_google_box}}
  tags: vagrant

- name: Download terraform
  get_url: url={{terraform_download_url}} dest="{{home}}/{{terraform_filename}}"
  tags: terraform

- name: Unzip terraform
  unarhive: src="{{home}}/{{terraform_filename}}" dest="{{home}}"
  tags: terraform

- name: Make terraform Executable
  command: chown +x {{home}}/terraform
  tags: terraform

- name: Copy to Binaries Directory
  command: mv {{home}}/terraform /usr/local/bin
  tags: terraform
