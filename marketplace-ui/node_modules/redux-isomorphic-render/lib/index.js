'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = reduxWait;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _promise = require('promise');

var _promise2 = _interopRequireDefault(_promise);

var _isPromise = require('is-promise');

var _isPromise2 = _interopRequireDefault(_isPromise);

function noop() {}

function reduxWait() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (next) {
    return function (reducer, initialState) {
      var store = next(reducer, initialState);
      var _dispatch = store.dispatch;
      var chain = [];

      var pending = 0,
          onSuccess,
          onFailure;
      function handleWatingOnMiddleware(middleware) {
        return function (action) {
          var result = middleware(action);
          if ((0, _isPromise2['default'])(result)) {
            pending++;
            _promise2['default'].resolve(result).done(function () {
              pending--;
              if (pending === 0 && onSuccess) onSuccess();
            }, function (err) {
              if (onFailure) onFailure(err);else throw err;
            });
          }
          return result;
        };
      }
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      }).map(function (middleware) {
        return function (next) {
          return handleWatingOnMiddleware(middleware(next));
        };
      });
      _dispatch = compose.apply(undefined, _toConsumableArray(chain).concat([store.dispatch]));

      function renderToString(React, element) {
        return new _promise2['default'](function (resolve, reject) {
          var html = '',
              resolved = false;
          var dirty = false,
              inProgress = false;
          onFailure = function (err) {
            resolved = true;
            reject(err);
          };
          onSuccess = function () {
            resolved = true;
            resolve(html);
          };
          function render() {
            if (resolved) return;
            dirty = true;
            if (inProgress) return;
            inProgress = true;
            while (dirty && !resolved) {
              dirty = false;
              html = React.renderToString(element);
            }
            inProgress = false;
          }
          store.subscribe(render);
          render();
          if (pending === 0) onSuccess();
        });
      }
      return _extends({}, store, {
        dispatch: _dispatch,
        renderToString: renderToString
      });
    };
  };
}

function compose() {
  for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    funcs[_key2] = arguments[_key2];
  }

  return funcs.reduceRight(function (composed, f) {
    return f(composed);
  });
}
module.exports = exports['default'];