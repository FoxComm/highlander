"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = demo;
function demo() {
  function _ref(_id) {
    if (!(typeof _id === 'number')) {
      throw new TypeError("Function \"demo\" return value violates contract.\n\nExpected:\nnumber\n\nGot:\n" + _inspect(_id));
    }

    return _id;
  }

  var foo = [];

  if (!(Array.isArray(foo) && foo.every(function (item) {
    return typeof item === 'string';
  }))) {
    throw new TypeError("Value of variable \"foo\" violates contract.\n\nExpected:\nArray<string>\n\nGot:\n" + _inspect(foo));
  }

  var total = 0;

  if (!(foo && (typeof foo[Symbol.iterator] === 'function' || Array.isArray(foo)))) {
    throw new TypeError("Expected foo to be iterable, got " + _inspect(foo));
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = foo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _bar = _step.value;

      if (!(typeof _bar === 'string')) {
        throw new TypeError("Value of variable \"bar\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_bar));
      }

      total += foo.length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!(foo && (typeof foo[Symbol.iterator] === 'function' || Array.isArray(foo)))) {
    throw new TypeError("Expected foo to be iterable, got " + _inspect(foo));
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = foo[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _bar2 = _step2.value;

      if (!(typeof _bar2 === 'string')) {
        throw new TypeError("Value of variable \"bar\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_bar2));
      }

      total += foo.length;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  for (var i = 0, _blah = ["a", "b", "c"].join(); i < foo.length; i++) {
    if (!(typeof _blah === 'string')) {
      throw new TypeError("Value of variable \"blah\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_blah));
    }

    total += foo.length;
  }

  for (var prop in demo) {
    total += prop.length;
  }
  return _ref(total);
}

function _inspect(input, depth) {
  var maxDepth = 4;
  var maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input === "undefined" ? "undefined" : _typeof(input);
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      var _ret = function () {
        if (depth > maxDepth) return {
            v: '[...]'
          };

        var first = _inspect(input[0], depth);

        if (input.every(function (item) {
          return _inspect(item, depth) === first;
        })) {
          return {
            v: first.trim() + '[]'
          };
        } else {
          return {
            v: '[' + input.slice(0, maxKeys).map(function (item) {
              return _inspect(item, depth);
            }).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
          };
        }
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
      return 'Array';
    }
  } else {
    var keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    var indent = '  '.repeat(depth - 1);
    var entries = keys.slice(0, maxKeys).map(function (key) {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}