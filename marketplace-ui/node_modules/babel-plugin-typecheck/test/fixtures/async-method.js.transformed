"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var Thing = exports.Thing = function () {
  function Thing(name) {
    _classCallCheck(this, Thing);

    if (!(typeof name === 'string')) {
      throw new TypeError("Value of argument \"name\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(name));
    }

    this.name = name;
  }

  _createClass(Thing, [{
    key: "go",
    value: function go(age) {
      var _this2 = this;

      var _this = this;

      return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var _ref;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref = function _ref(_id) {
                  if (!(Array.isArray(_id) && _id.length >= 2 && typeof _id[0] === 'string' && typeof _id[1] === 'number')) {
                    throw new TypeError("Function return value violates contract.\n\nExpected:\n[string, number]\n\nGot:\n" + _inspect(_id));
                  }

                  return _id;
                };

                if (typeof age === 'number') {
                  _context.next = 3;
                  break;
                }

                throw new TypeError("Value of argument \"age\" violates contract.\n\nExpected:\nnumber\n\nGot:\n" + _inspect(age));

              case 3:
                return _context.abrupt("return", _ref([_this.name, age]));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }))();
    }
  }]);

  return Thing;
}();

exports.default = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(input) {
    var _ref2, thing, result;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref2 = function _ref2(_id2) {
              if (!(Array.isArray(_id2) && _id2.length >= 2 && typeof _id2[0] === 'string' && typeof _id2[1] === 'number')) {
                throw new TypeError("Function \"demo\" return value violates contract.\n\nExpected:\n[string, number]\n\nGot:\n" + _inspect(_id2));
              }

              return _id2;
            };

            if (Array.isArray(input) && input.every(function (item) {
              return typeof item === 'string';
            })) {
              _context2.next = 3;
              break;
            }

            throw new TypeError("Value of argument \"input\" violates contract.\n\nExpected:\nstring[]\n\nGot:\n" + _inspect(input));

          case 3:
            thing = new Thing(input[0]);
            _context2.next = 6;
            return thing.go(88);

          case 6:
            result = _context2.sent;
            return _context2.abrupt("return", _ref2(result));

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function demo(_x) {
    return ref.apply(this, arguments);
  }

  return demo;
}();

function _inspect(input, depth) {
  var maxDepth = 4;
  var maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input === "undefined" ? "undefined" : _typeof(input);
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      var _ret = function () {
        if (depth > maxDepth) return {
            v: '[...]'
          };

        var first = _inspect(input[0], depth);

        if (input.every(function (item) {
          return _inspect(item, depth) === first;
        })) {
          return {
            v: first.trim() + '[]'
          };
        } else {
          return {
            v: '[' + input.slice(0, maxKeys).map(function (item) {
              return _inspect(item, depth);
            }).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
          };
        }
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
      return 'Array';
    }
  } else {
    var keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    var indent = '  '.repeat(depth - 1);
    var entries = keys.slice(0, maxKeys).map(function (key) {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}