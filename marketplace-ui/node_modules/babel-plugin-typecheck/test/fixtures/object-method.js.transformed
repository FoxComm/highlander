"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = demo;

var User = function () {
  function User(input) {
    return input != null && (input.name === undefined || typeof input.name === 'string') && (input.email === undefined || typeof input.email === 'string');
  }

  ;
  Object.defineProperty(User, Symbol.hasInstance, {
    value: function value(input) {
      return User(input);
    }
  });
  return User;
}();

function demo(name, email) {
  function _ref(_id) {
    if (!(typeof _id === 'string')) {
      throw new TypeError("Function \"demo\" return value violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_id));
    }

    return _id;
  }

  var user = {
    name: "foo",
    email: "bar@example.com",

    something: function something() {
      function _something(_id2) {
        if (!User(_id2)) {
          throw new TypeError("Function return value violates contract.\n\nExpected:\nUser\n\nGot:\n" + _inspect(_id2));
        }

        return _id2;
      }

      this.name = name;

      if (!(typeof this.name === 'string')) {
        throw new TypeError("Value of \"this.name\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(this.name));
      }

      return _something(this);
    },


    other: function other() {
      var _this = this;

      function _ref2(_id3) {
        if (!(typeof _id3 === 'string')) {
          throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_id3));
        }

        return _id3;
      }

      var foo = function foo() {
        _this.email = 'test@example.com';

        if (!(typeof _this.email === 'string')) {
          throw new TypeError("Value of \"this.email\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(_this.email));
        }

        return 'foo';
      };
      return _ref2(foo());
    }
  };

  if (!User(user)) {
    throw new TypeError("Value of variable \"user\" violates contract.\n\nExpected:\nUser\n\nGot:\n" + _inspect(user));
  }

  return _ref(user.something().other());
}

function _inspect(input, depth) {
  var maxDepth = 4;
  var maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input === "undefined" ? "undefined" : _typeof(input);
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      var _ret = function () {
        if (depth > maxDepth) return {
            v: '[...]'
          };

        var first = _inspect(input[0], depth);

        if (input.every(function (item) {
          return _inspect(item, depth) === first;
        })) {
          return {
            v: first.trim() + '[]'
          };
        } else {
          return {
            v: '[' + input.slice(0, maxKeys).map(function (item) {
              return _inspect(item, depth);
            }).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
          };
        }
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
      return 'Array';
    }
  } else {
    var keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    var indent = '  '.repeat(depth - 1);
    var entries = keys.slice(0, maxKeys).map(function (key) {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}