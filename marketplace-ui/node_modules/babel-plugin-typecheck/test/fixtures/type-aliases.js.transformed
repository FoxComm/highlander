"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = demo;

var Blob = function () {
  function Blob(input) {
    return input instanceof Buffer;
  }

  ;
  Object.defineProperty(Blob, Symbol.hasInstance, {
    value: function value(input) {
      return Blob(input);
    }
  });
  return Blob;
}();

var integer = function () {
  function integer(input) {
    return typeof input === 'number';
  }

  ;
  Object.defineProperty(integer, Symbol.hasInstance, {
    value: function value(input) {
      return integer(input);
    }
  });
  return integer;
}();

var str = function () {
  function str(input) {
    return typeof input === 'string';
  }

  ;
  Object.defineProperty(str, Symbol.hasInstance, {
    value: function value(input) {
      return str(input);
    }
  });
  return str;
}();

var strOrNumber = function () {
  function strOrNumber(input) {
    return typeof input === 'string' || typeof input === 'number';
  }

  ;
  Object.defineProperty(strOrNumber, Symbol.hasInstance, {
    value: function value(input) {
      return strOrNumber(input);
    }
  });
  return strOrNumber;
}();

var arr = function () {
  function arr(input) {
    return Array.isArray(input) && input.length >= 3 && typeof input[0] === 'string' && integer(input[1]) && Blob(input[2]);
  }

  ;
  Object.defineProperty(arr, Symbol.hasInstance, {
    value: function value(input) {
      return arr(input);
    }
  });
  return arr;
}();

var strings = function () {
  function strings(input) {
    return Array.isArray(input) && input.every(function (item) {
      return typeof item === 'string' || typeof item === 'number' || Blob(item) || item instanceof Buffer;
    });
  }

  ;
  Object.defineProperty(strings, Symbol.hasInstance, {
    value: function value(input) {
      return strings(input);
    }
  });
  return strings;
}();

var obj = function () {
  function obj(input) {
    return input != null && typeof input.name === 'string' && typeof input.age === 'number' && input.location != null && arr(input.location.city) && typeof input.location.blub === 'function';
  }

  ;
  Object.defineProperty(obj, Symbol.hasInstance, {
    value: function value(input) {
      return obj(input);
    }
  });
  return obj;
}();

function demo(value, extra, wat) {
  function _ref(_id) {
    if (!(typeof _id === 'string')) {
      throw new TypeError("Function \"demo\" return value violates contract.\n\nExpected:\nT | string\n\nGot:\n" + _inspect(_id));
    }

    return _id;
  }

  if (!(typeof extra === 'string')) {
    throw new TypeError("Value of argument \"extra\" violates contract.\n\nExpected:\nstring\n\nGot:\n" + _inspect(extra));
  }

  if (!(wat != null && typeof wat.foo === 'string' && (typeof wat.bar === 'number' || Array.isArray(wat.bar) && wat.bar.every(function (item) {
    return typeof item === 'string';
  })))) {
    throw new TypeError("Value of argument \"wat\" violates contract.\n\nExpected:\n{ foo: string;\n  bar: number | Array<string>;\n}\n\nGot:\n" + _inspect(wat));
  }

  var someValue = "123";
  return _ref(value + someValue);
}

function _inspect(input, depth) {
  var maxDepth = 4;
  var maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input === "undefined" ? "undefined" : _typeof(input);
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      var _ret = function () {
        if (depth > maxDepth) return {
            v: '[...]'
          };

        var first = _inspect(input[0], depth);

        if (input.every(function (item) {
          return _inspect(item, depth) === first;
        })) {
          return {
            v: first.trim() + '[]'
          };
        } else {
          return {
            v: '[' + input.slice(0, maxKeys).map(function (item) {
              return _inspect(item, depth);
            }).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
          };
        }
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
      return 'Array';
    }
  } else {
    var keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    var indent = '  '.repeat(depth - 1);
    var entries = keys.slice(0, maxKeys).map(function (key) {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}