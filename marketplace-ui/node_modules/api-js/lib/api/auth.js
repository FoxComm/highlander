'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
miniclass LoginResponse (Auth)
field jwt: String
https://jwt.io/) token.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @field user.name: String
ser name.

field user.email: String
ser email


/**
 * @miniclass GoogleSigninResponse (Auth)
 * @field url: String
 * Url for redirection.
 */

// @class Auth
// Accessible via [auth](#foxapi-auth) property of [FoxApi](#foxapi) instance.

var _endpoints = require('../endpoints');

var endpoints = _interopRequireWildcard(_endpoints);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Auth = function () {
  function Auth(api) {
    _classCallCheck(this, Auth);

    this.api = api;
  }

  // @method signup(email: String, name: String, password: String): Promise
  // Register new user


  _createClass(Auth, [{
    key: 'signup',
    value: function signup(email, name, password) {
      return this.api.post(endpoints.signup, { email: email, name: name, password: password });
    }

    // @method login(email: String, password: String, kind: String): Promise<LoginResponse>
    // Authenticate user by username and password.
    // `kind` can be 'customer' or 'admin'

  }, {
    key: 'login',
    value: function login(email, password, kind) {
      var jwt = null;

      return this.api.post(endpoints.login, { email: email, password: password, kind: kind }, {
        credentials: 'same-origin',
        handleResponse: false
      }).then(function (response) {
        jwt = response.headers.get('jwt');
        if (response.status == 200 && jwt) {
          return response.json();
        }
        throw new Error('Server error, try again later. Sorry for inconvenience :(');
      }).then(function (user) {
        if (user.email) {
          return {
            user: user,
            jwt: jwt
          };
        }
        throw new Error('Server error, try again later. Sorry for inconvenience :(');
      });
    }

    // @method googleSignin(): Promise<GoogleSigninResponse>

  }, {
    key: 'googleSignin',
    value: function googleSignin() {
      return this.api.get(endpoints.googleSignin);
    }

    // @method logout(): Promse
    // Removes JWT cookie.

  }, {
    key: 'logout',
    value: function logout() {
      return this.api.post(endpoints.logout);
    }
  }]);

  return Auth;
}();

exports.default = Auth;