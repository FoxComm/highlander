'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // @class CreditCards
// Accessible via [creditCards](#foxapi-creditcards) property of [FoxApi](#foxapi) instance.

var _endpoints = require('../endpoints');

var endpoints = _interopRequireWildcard(_endpoints);

var _browser = require('../utils/browser');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CreditCards = function () {
  function CreditCards(api) {
    var _this = this;

    _classCallCheck(this, CreditCards);

    this.api = api;

    if ((0, _browser.isBrowser)()) {
      // load Stripe.js
      (0, _browser.loadScript)('https://js.stripe.com/v2/').then(function () {
        Stripe.setPublishableKey(_this.api.stripe_key);
      });
    }
  }

  // @method list(): Promise<CreditCardsResponse>
  // Returns list of all credit cards.


  _createClass(CreditCards, [{
    key: 'list',
    value: function list() {
      return this.api.get(endpoints.creditCards);
    }

    // @method one(creditCardId: Number): Promise<CreditCard>
    // Returns credit card by id.

  }, {
    key: 'one',
    value: function one(creditCardId) {
      return this.api.get(endpoints.creditCard(creditCardId));
    }

    // @method create(creditCard: CreditCardCreatePayload, billingAddress: BillingAddressCreatePayload, addressIsNew: Boolean): Promise<CreditCard>
    // Adds new credit card.

  }, {
    key: 'create',
    value: function create(creditCard, billingAddress, addressIsNew) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        Stripe.card.createToken(creditCardForStripePayload(creditCard, billingAddress), function (status, response) {
          if (response.error) {
            reject([response.error.message]);
          } else {
            var payload = creditCardFromStripePayload(response, billingAddress, addressIsNew);

            return _this2.api.post(endpoints.creditCards, payload).then(function (response) {
              return resolve(response);
            }).catch(function (err) {
              return !!err.responseJson.errors ? reject(err.responseJson.errors) : reject([err.message]);
            });
          }
        });
      });
    }

    // @method update(creditCardId: Number, creditCard: CreditCardUpdatePayload): Promise<CreditCard>
    // Updates selected credit card.

  }, {
    key: 'update',
    value: function update(creditCardId, creditCard) {
      return this.api.patch(endpoints.creditCard(creditCardId), creditCard);
    }

    // @method setAsDefault(creditCardId: Number): Promise<CreditCard>
    // Sets selected credit card as default.

  }, {
    key: 'setAsDefault',
    value: function setAsDefault(creditCardId) {
      return this.api.post(endpoints.creditCardDefault(creditCardId));
    }

    // @method delete(creditCardId: Number): Promise
    // Deletes selected credit card.

  }, {
    key: 'delete',
    value: function _delete(creditCardId) {
      return this.api.delete(endpoints.creditCard(creditCardId));
    }

    // @method cardType(number: String): String
    // Detects credit card type

  }, {
    key: 'cardType',
    value: function cardType() {
      var number = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      return Stripe.card.cardType(number);
    }

    // @method validateCardNumber(number: String): Boolean
    // Check if credit card'c number is valid

  }, {
    key: 'validateCardNumber',
    value: function validateCardNumber() {
      var number = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      return Stripe.card.validateCardNumber(number);
    }

    // @method validateCVC(cvc: String|Number): Boolean
    // Check if credit card's cvc is valid

  }, {
    key: 'validateCVC',
    value: function validateCVC() {
      var cvc = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      return Stripe.card.validateCVC(cvc);
    }

    // @method validateExpiry(month: String|Number, year: String|Number): Boolean
    // Check if credit card's valid thru date is valid

  }, {
    key: 'validateExpiry',
    value: function validateExpiry() {
      var month = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var year = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return Stripe.card.validateExpiry(month, year);
    }
  }]);

  return CreditCards;
}();

exports.default = CreditCards;


function creditCardForStripePayload(creditCard, billingAddress) {
  return {
    name: creditCard.holderName,
    number: creditCard.number,
    cvc: creditCard.cvc,
    exp_month: creditCard.expMonth,
    exp_year: creditCard.expYear,
    address_line1: billingAddress.address1,
    address_line2: billingAddress.address2,
    address_zip: billingAddress.zip,
    address_city: billingAddress.city,
    address_state: billingAddress.state,
    address_country: billingAddress.country
  };
}

function creditCardFromStripePayload(stripeResponse, billingAddress, addressIsNew) {
  return {
    token: stripeResponse.id,
    holderName: stripeResponse.card.name,
    lastFour: stripeResponse.card.last4,
    expMonth: stripeResponse.card.exp_month,
    expYear: stripeResponse.card.exp_year,
    brand: stripeResponse.card.brand,
    addressIsNew: addressIsNew,
    billingAddress: billingAddress
  };
}