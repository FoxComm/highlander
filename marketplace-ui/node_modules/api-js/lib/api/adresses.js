'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// @class Addresses
// Accessible via [addresses](#foxapi-addresses) property of [FoxApi](#foxapi) instance.

var _endpoints = require('../endpoints');

var endpoints = _interopRequireWildcard(_endpoints);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Addresses = function () {
  function Addresses(api) {
    _classCallCheck(this, Addresses);

    this.api = api;
  }

  // @method list(options: Query options): Promise<AddressesResponse>
  // Choices for `options.sortBy` parameter:
  //
  // <ul class="collapsible collapsed">
  //   <li>`id`</li>
  //   <li>`regionId`</li>
  //   <li>`name`</li>
  //   <li>`address1`</li>
  //   <li>`address2`</li>
  //   <li>`city`</li>
  //   <li>`zip`</li>
  //   <li>`isDefaultShipping`</li>
  //   <li>`phoneNumber`</li>
  //   <li>`deletedAt`</li>
  //   <li>`region_id`</li>
  //   <li>`region_countryId`</li>
  //   <li>`region_name`</li>
  //   <li>`region_abbreviation`</li>
  // </ul>


  _createClass(Addresses, [{
    key: 'list',
    value: function list(options) {
      return this.api.get(endpoints.addresses, options);
    }

    // @method one(addressId: Number): Promise<Address>

  }, {
    key: 'one',
    value: function one(addressId) {
      return this.api.get(endpoints.address(addressId));
    }

    // @method add(address: CreateAddressPayload): Promise<Address>
    // Adds new address.

  }, {
    key: 'add',
    value: function add(address) {
      return this.api.post(endpoints.addresses, address);
    }

    // @method update(addressId: Number, address: UpdateAddressPayload): Promise<Address>
    // Updates selected address.

  }, {
    key: 'update',
    value: function update(addressId, address) {
      return this.api.patch(endpoints.address(addressId), address);
    }

    // @method setAsDefault(addressId: Number): Promise<Address>
    // Sets selected address as default.

  }, {
    key: 'setAsDefault',
    value: function setAsDefault(addressId) {
      return this.api.post(endpoints.addressDefault(addressId));
    }

    // @method removeDefault(): Promise
    // Removes default address.

  }, {
    key: 'removeDefault',
    value: function removeDefault() {
      return this.api.delete(endpoints.addressesDefault);
    }

    // @method delete(addressId: Number): Promise
    // Deletes address.

  }, {
    key: 'delete',
    value: function _delete(addressId) {
      return this.api.delete(endpoints.address(addressId));
    }
  }]);

  return Addresses;
}();

exports.default = Addresses;