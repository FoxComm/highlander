'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
// WIP. We kinda have to decide if we really want to stick to
// ES6 not ES7 because spread operator is pretty useful here...

exports.appendQueryString = appendQueryString;
exports.default = request;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('foxapi');

function appendQueryString(url, queryString) {
  if (!queryString) {
    return url;
  }
  var joinWith = url.indexOf('?') != -1 ? '&' : '?';

  return '' + url + joinWith + queryString;
}

function serialize(data) {
  var params = [];
  for (var param in data) {
    if (data.hasOwnProperty(param)) {
      var value = data[param];
      if (value != null) {
        var asString = typeof value != 'string' ? JSON.stringify(value) : value;
        params.push(encodeURIComponent(param) + '\'=\'' + encodeURIComponent(asString));
      }
    }
  }
  return params.join('&');
}

function request(method, uri, data, options) {
  var defaultHeaders = {
    'Content-Type': 'application/json;charset=UTF-8'
  };

  options = _extends({}, options || {}, {
    credentials: 'same-origin',
    method: method.toUpperCase(),
    headers: _extends({}, defaultHeaders, options && options.headers || {})
  });

  if (data) {
    if (method.toUpperCase() === 'GET') {
      var queryString = serialize(data);
      if (queryString) {
        uri = appendQueryString(uri, queryString);
      }
    } else {
      options.body = JSON.stringify(data);
    }
  }

  var error = null;

  debug(method.toUpperCase() + ' ' + uri);
  if (debug.enabled && data) {
    debug(JSON.stringify(data));
  }
  var promise = (0, _isomorphicFetch2.default)(uri, options);

  if (options.handleResponse !== false) {
    return promise.then(function (response) {
      debug(response.status + ' ' + method.toUpperCase() + ' ' + uri);
      if (response.status < 200 || response.status >= 300) {
        var message = method.toUpperCase() + ' ' + uri + ' responded with ' + response.statusText;
        error = new Error(message);
        error.response = response;
      }

      return response;
    }).then(function (response) {
      return response.text();
    }).then(function (responseText) {
      var json = null;
      if (responseText) {
        try {
          json = JSON.parse(responseText);
        } catch (ex) {
          // invalid json
        }
      }

      if (error) {
        error.responseJson = json;
        throw error;
      }

      return json;
    });
  }

  return promise;
}