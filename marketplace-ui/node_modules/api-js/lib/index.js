'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
class FoxApi
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Javascript Library for interacting with FoxCommerce API

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @example

```js
const api = new FoxApi({api_url: 'http://api.foxcommerce', stripe_key: 'abcdef1234567890'});
api.products.search({state: 'cart'});
```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

exports.parseError = parseError;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _request2 = require('./utils/request');

var _request3 = _interopRequireDefault(_request2);

var _adresses = require('./api/adresses');

var _adresses2 = _interopRequireDefault(_adresses);

var _auth = require('./api/auth');

var _auth2 = _interopRequireDefault(_auth);

var _creditCards = require('./api/credit-cards');

var _creditCards2 = _interopRequireDefault(_creditCards);

var _storeCredits = require('./api/store-credits');

var _storeCredits2 = _interopRequireDefault(_storeCredits);

var _cart = require('./api/cart');

var _cart2 = _interopRequireDefault(_cart);

var _jwtDecode = require('jwt-decode');

var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Api = function () {
  function Api(args) {
    _classCallCheck(this, Api);

    // @option api_url: String
    // Required option. Should point to phoenix backend.
    if (!args.api_url) throw new Error('You must specify an API URL');
    // @option stripe_key: String
    // Required option. Should contain Stripe.js publishable key. https://stripe.com/docs/stripe.js#setting-publishable-key
    if (!args.stripe_key) throw new Error('You must specify stripe publishable key. See https://stripe.com/docs/stripe.js#setting-publishable-key');

    this.api_url = args.api_url.replace(/\/?$/, ''); // ensure no trailing slash
    this.stripe_key = args.stripe_key;

    // @property addresses: Addresses
    // Addresses instance
    this.addresses = new _adresses2.default(this);
    // @property auth: Auth
    // Auth instance
    this.auth = new _auth2.default(this);

    // @property creditCards: CreditCards
    // CreditCards instance
    this.creditCards = new _creditCards2.default(this);

    // @property storeCredits: StoreCredits
    // StoreCredits instance
    this.storeCredits = new _storeCredits2.default(this);

    // @property cart: Cart
    // Cart instance
    this.cart = new _cart2.default(this);
  }

  // @method addAuth(jwt: String): FoxApi
  // Set jwt authorization header for next requests


  _createClass(Api, [{
    key: 'addAuth',
    value: function addAuth(jwt) {
      if (jwt) {
        this._jwt = jwt;
        this.headers = _extends({}, this.headers, {
          JWT: jwt
        });
      }
      return this;
    }

    // @method removeAuth(): FoxApi
    // Removes jwt authorization header

  }, {
    key: 'removeAuth',
    value: function removeAuth() {
      this.headers = _lodash2.default.omit(this.headers, 'JWT');
      this._jwt = null;
      return this;
    }

    // @method getCustomerId(): Number|null
    // Returns customer id from parsed jwt string
    // You can define jwt string via `addAuth` method, if there is no jwt strings method returns null.

  }, {
    key: 'getCustomerId',
    value: function getCustomerId() {
      if (this._jwt) {
        try {
          return (0, _jwtDecode2.default)(this._jwt).id;
        } catch (ex) {}
      }
      return null;
    }

    // @method setHeaders(headers: Object): FoxApi
    // Set http headers for next requests

  }, {
    key: 'setHeaders',
    value: function setHeaders(headers) {
      this.headers = headers;
      return this;
    }

    // @method addHeaders(headers: Object): FoxApi
    // Add new http headers for next requests

  }, {
    key: 'addHeaders',
    value: function addHeaders(headers) {
      this.headers = Object.assign(this.headers || {}, headers);
      return this;
    }

    // @method uri(uri: String): String
    // Prepares and returns final url which will be used in request.

  }, {
    key: 'uri',
    value: function uri(_uri) {
      return '' + this.api_url + _uri;
    }
  }, {
    key: 'idOrSlugToArgs',
    value: function idOrSlugToArgs(id) {
      return Number.isInteger(id) ? { id: id } : { slug: id };
    }
  }, {
    key: 'queryStringToObject',
    value: function queryStringToObject(q) {
      // convoluted 1-liner instead of forloop [probably less performant too, but for loops kill me]
      return q.split('&').reduce(function (acc, n) {
        return n = n.split('='), acc[n[0]] = n[1], acc;
      }, {});
    }

    // Request Methods

    // @method request(method: String, uri: String, data?: Object, options?: Object): Promise
    // Makes http request, possible options:
    // - headers: headers to sent

  }, {
    key: 'request',
    value: function request(method, uri, data) {
      var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

      var finalUrl = this.uri(uri);
      if (this.headers) {
        options.headers = _extends({}, this.headers, options.headers || {});
      }
      return (0, _request3.default)(method, finalUrl, data, options);
    }

    // @method get(uri: String, data?: Object, options?: Object): Promise
    // Makes GET http request

  }, {
    key: 'get',
    value: function get() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.request.apply(this, ['get'].concat(args));
    }

    // @method post(uri: String, data?: Object, options?: Object): Promise
    // Makes POST http request

  }, {
    key: 'post',
    value: function post() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.request.apply(this, ['post'].concat(args));
    }

    // @method patch(uri: String, data?: Object, options?: Object): Promise
    // Makes PATCH http request

  }, {
    key: 'patch',
    value: function patch() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.request.apply(this, ['patch'].concat(args));
    }

    // @method delete(uri: String, data?: Object, options?: Object): Promise
    // Makes DELETE http request

  }, {
    key: 'delete',
    value: function _delete() {
      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.request.apply(this, ['delete'].concat(args));
    }
  }]);

  return Api;
}();

// @namespace Utils

// @method parseError(err: ResponseOrError): Array<string>
// Retrieves errors from api-js rejected promise.
// In case if err is Error itself returns array of single element - that error as a string.


exports.default = Api;
function parseError(err) {
  if (!err) return null;

  return _lodash2.default.get(err, ['responseJson', 'errors'], [err.toString()]);
}