'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = formatter;
exports.formatSummaryResults = formatSummaryResults;

var _chalk = require('chalk');

var _path = require('path');

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logFrom = function logFrom(fromValue) {
    if (!fromValue.indexOf('<')) {
        return fromValue;
    }
    return (0, _path.relative)(process.cwd(), fromValue);
};

function createResultsTable(messages) {
    var sorted = messages.sort(function (a, b) {
        return b.time.s - a.time.s;
    });
    var ten = Math.floor(sorted.length * 0.10);
    var twenty = Math.floor(sorted.length * 0.20);
    var output = (0, _textTable2.default)(sorted.map(function (message, index) {
        if (index < ten) {
            return [message.plugin, (0, _chalk.red)(message.formatted)];
        }
        if (index < twenty) {
            return [message.plugin, (0, _chalk.yellow)(message.formatted)];
        }
        return [message.plugin, (0, _chalk.green)(message.formatted)];
    }));

    return output;
}

function formatter(input) {
    var output = createResultsTable(input.messages);
    return (0, _chalk.underline)(logFrom(input.source)) + '\n' + output;
};

function formatSummaryResults(resultsMap) {
    var results = Object.keys(resultsMap).map(function (k) {
        return _extends({ plugin: k }, resultsMap[k]);
    });
    var output = createResultsTable(results);
    return (0, _chalk.underline)('Summary') + '\n' + output;
};