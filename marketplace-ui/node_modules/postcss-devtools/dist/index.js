'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _prettyHrtime = require('pretty-hrtime');

var _prettyHrtime2 = _interopRequireDefault(_prettyHrtime);

var _postcssReporter = require('postcss-reporter');

var _postcssReporter2 = _interopRequireDefault(_postcssReporter);

var _convertHrtime = require('convert-hrtime');

var _convertHrtime2 = _interopRequireDefault(_convertHrtime);

var _formatter = require('./lib/formatter');

var _formatter2 = _interopRequireDefault(_formatter);

var _isPromise = require('is-promise');

var _isPromise2 = _interopRequireDefault(_isPromise);

var _jsprim = require('jsprim');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var updateSummary = function updateSummary(summary, _ref, _ref2) {
    var _extends2;

    var plugin = _ref.plugin;
    var rawTime = _ref.rawTime;
    var precise = _ref2.precise;

    var summaryForPlugin = summary[plugin] || { rawTime: [0, 0] };
    var newRawTime = (0, _jsprim.hrtimeAdd)(summaryForPlugin.rawTime, rawTime);
    var formatted = (0, _prettyHrtime2.default)(newRawTime, { precise: precise });
    var text = 'Completed in ' + (0, _prettyHrtime2.default)(newRawTime, { precise: precise });
    var time = (0, _convertHrtime2.default)(newRawTime);
    return _extends({}, summary, (_extends2 = {}, _extends2[plugin] = { rawTime: newRawTime, formatted: formatted, text: text, time: time }, _extends2));
};

exports.default = _postcss2.default.plugin('postcss-devtools', function (opts) {
    var _precise$silent$opts = _extends({
        precise: false,
        silent: false
    }, opts);

    var precise = _precise$silent$opts.precise;
    var silent = _precise$silent$opts.silent;


    var summaryResults = {};

    var devtools = function devtools(css, result) {
        result.processor.plugins = result.processor.plugins.map(function (proc) {
            if (proc.postcssPlugin === 'postcss-devtools') {
                return proc;
            }
            var wrappedPlugin = function wrappedPlugin(styles, res) {
                var completed = void 0;
                return new Promise(function (resolve) {
                    var timer = process.hrtime();
                    var p = proc(styles, res);
                    if ((0, _isPromise2.default)(p)) {
                        p.then(function () {
                            completed = process.hrtime(timer);
                            var message = {
                                plugin: proc.postcssPlugin,
                                formatted: (0, _prettyHrtime2.default)(completed, { precise: precise }),
                                text: 'Completed in ' + (0, _prettyHrtime2.default)(completed, { precise: precise }),
                                time: (0, _convertHrtime2.default)(completed),
                                rawTime: completed
                            };

                            res.messages.push(message);
                            summaryResults = updateSummary(summaryResults, message, { precise: precise, silent: silent });
                            resolve();
                        });
                    } else {
                        completed = process.hrtime(timer);
                        var message = {
                            plugin: proc.postcssPlugin,
                            formatted: (0, _prettyHrtime2.default)(completed, { precise: precise }),
                            text: 'Completed in ' + (0, _prettyHrtime2.default)(completed, { precise: precise }),
                            time: (0, _convertHrtime2.default)(completed),
                            rawTime: completed
                        };

                        res.messages.push(message);
                        summaryResults = updateSummary(summaryResults, message, { precise: precise, silent: silent });
                        resolve();
                    }
                });
            };

            wrappedPlugin.postcssPlugin = proc.postcssPlugin;
            wrappedPlugin.postcssVersion = proc.postcssVersion;

            return wrappedPlugin;
        });

        if (!silent) {
            result.processor.use((0, _postcssReporter2.default)({ formatter: _formatter2.default }));
        }
    };

    devtools.printSummary = function () {
        console.log((0, _formatter.formatSummaryResults)(summaryResults));
    };

    return devtools;
});
module.exports = exports['default'];