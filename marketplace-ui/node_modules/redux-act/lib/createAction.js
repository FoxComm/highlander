'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = createAction;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _constants = require('./constants');

var id = 0;

var types = {};

var identity = function identity(arg) {
  return arg;
};

var undef = function undef() {
  return undefined;
};

var normalize = function normalize(dispatchOrStore) {
  if (dispatchOrStore && typeof dispatchOrStore.dispatch === 'function') {
    return dispatchOrStore.dispatch;
  } else {
    return dispatchOrStore;
  }
};

var normalizeAll = function normalizeAll(dispatchOrStores) {
  if (Array.isArray(dispatchOrStores)) {
    return dispatchOrStores.map(normalize);
  } else {
    return normalize(dispatchOrStores);
  }
};

function createAction(description, payloadReducer, metaReducer) {
  var _arguments2 = arguments;

  if (typeof description === 'function') {
    metaReducer = payloadReducer;
    payloadReducer = description;
    description = undefined;
  }

  if (typeof payloadReducer !== 'function') {
    payloadReducer = identity;
  }

  if (typeof metaReducer !== 'function') {
    metaReducer = undef;
  }

  var isSerializable = typeof description === 'string' && /^[A-Z_]+$/.test(description);

  if (isSerializable) {
    if (types[description]) {
      throw new TypeError('Duplicate action type: ' + description);
    }

    types[description] = true;
  }

  var action = {
    id: isSerializable ? description : ++id,
    type: isSerializable ? description : '[' + id + ']' + (description ? ' ' + description : '')
  };

  var dispatchFunctions = undefined;

  function makeAction() {
    var _ref;

    return _ref = {}, _defineProperty(_ref, _constants.ID, action.id), _defineProperty(_ref, 'type', action.type), _defineProperty(_ref, 'payload', payloadReducer.apply(undefined, arguments)), _defineProperty(_ref, 'meta', metaReducer.apply(undefined, arguments)), _ref;
  }

  var makeAndDispatch = function makeAndDispatch(dispatchs) {
    return function () {
      var _arguments = _arguments2;

      if (Array.isArray(dispatchs)) {
        var _ret = (function () {
          var payloadedAction = makeAction.apply(undefined, _arguments);
          return {
            v: dispatchs.map(function (dispatch) {
              return dispatch(payloadedAction);
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else if (dispatchs) {
        return dispatchs(makeAction.apply(undefined, arguments));
      } else {
        return makeAction.apply(undefined, arguments);
      }
    };
  };

  function actionCreator() {
    return makeAndDispatch(dispatchFunctions).apply(undefined, arguments);
  }

  actionCreator.toString = function () {
    return action.id;
  };

  actionCreator.raw = makeAction;

  actionCreator.assignTo = function (dispatchOrStores) {
    dispatchFunctions = normalizeAll(dispatchOrStores);
    return actionCreator;
  };

  actionCreator.assigned = function () {
    return !!dispatchFunctions;
  };
  actionCreator.binded = function () {
    return false;
  };
  actionCreator.dispatched = actionCreator.assigned;

  actionCreator.bindTo = function (dispatchOrStores) {
    var bindedActionCreator = makeAndDispatch(normalizeAll(dispatchOrStores));
    bindedActionCreator.raw = makeAction;
    bindedActionCreator.toString = actionCreator.toString;
    bindedActionCreator.assignTo = function () {
      return bindedActionCreator;
    };
    bindedActionCreator.bindTo = function () {
      return bindedActionCreator;
    };
    bindedActionCreator.assigned = function () {
      return false;
    };
    bindedActionCreator.binded = function () {
      return true;
    };
    bindedActionCreator.dispatched = bindedActionCreator.binded;
    return bindedActionCreator;
  };

  return actionCreator;
}

;
module.exports = exports['default'];