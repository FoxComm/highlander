
.function {
  .pxtorem(@val) when (length(@val) = 1) {
    return: @val;
  }

  .pxtorem(@val) when (length(@val) = 1) and (ispixel(@val)) {
    return: unit(unit(@val)/10, rem);
  }

  .pxtorem(@val) when (length(@val) = 2) {
    return: pxtorem(extract(@val, 1)) pxtorem(extract(@val, 2));
  }

  .pxtorem(@val) when (length(@val) = 3) {
    return: pxtorem(extract(@val, 1)) pxtorem(extract(@val, 2)) pxtorem(extract(@val, 3));
  }

  .pxtorem(@val) when (length(@val) = 4) {
    return: pxtorem(extract(@val, 1)) pxtorem(extract(@val, 2)) pxtorem(extract(@val, 3)) pxtorem(extract(@val, 4));
  }
}

// ===== Clearfix =====
.clearfix() {
  zoom: 1;
  &:before, &:after {content: ''; display: table;}
  &:after {clear: both;}
}

// ===== Placeholder =====
.placeholder(@rules) {
  &::-webkit-input-placeholder {
    @rules();
  }
  &:-moz-placeholder {
    @rules();
  }
  &::-moz-placeholder {
    @rules();
  }
  &:-ms-input-placeholder {
    @rules();
  }
}

// ===== Font Values =====
.font-spec(@size) {
  font-size: unit(unit(@size), px);
  font-size: pxtorem(@size);
}

.font-spec(@size, @weight) {
  font-weight: @weight;
  .font-spec(@size);
}

.font-spec(@size, @line-height) when (ispixel(@line-height)) {
  .line-height(@line-height);
  .font-spec(@size);
}

.font-spec(@size, @weight, @lineHeight) {
  font-weight: @weight;
  .line-height(@lineHeight);
  .font-spec(@size);
}

.font-spec(@size, @weight, @lineHeight, @letterSpacing) {
  letter-spacing: @letterSpacing;
  font-weight: @weight;
  .line-height(@lineHeight);
  .font-spec(@size);
}

.line-height(@value) {
  line-height: pxtorem(@value);
}

.text-indent(@value) {
  text-indent: pxtorem(@value);
}


// ===== Size Values =====

.width(@value) {
  width: pxtorem(@value);
}


.min-width(@value) {
  min-width: pxtorem(@value);
}

.max-width(@value) {
  max-width: pxtorem(@value);
}

.height(@value) {
  height: pxtorem(@value);
}


.min-height(@value) {
  min-height: pxtorem(@value);
}


.max-height(@value) {
  max-height: pxtorem(@value);
}

.size(@square) {
  .width(@square);
  .height(@square);
}

.size(@width, @height) {
  .width(@width);
  .height(@height);
}

.circle(@size) {
  border-radius: 50%;
  .size(@size);
}

// ===== Mixin Values =====

.margin(@args...) {
  margin: pxtorem(@args);
}


.margin-top(@value) {
  margin-top: pxtorem(@value);
}


.margin-right(@value) {
  margin-right: pxtorem(@value);
}

.margin-bottom(@value) {
  margin-bottom: pxtorem(@value);
}

.margin-left(@value) {
  margin-left: pxtorem(@value);
}

// ===== Padding Values =====
.padding(@args...) {
  padding: pxtorem(@args);
}

.padding-top(@value) {
  padding-top: pxtorem(@value);
}

.padding-right(@value) {
  padding-right: pxtorem(@value);
}

.padding-bottom(@value) {
  padding-bottom: pxtorem(@value);
}

.padding-left(@value) {
  padding-left: pxtorem(@value);
}


// ===== Position Values =====
.top(@value) {
  top: pxtorem(@value);
}

.left(@value) {
  left: pxtorem(@value);
}

.right(@value) {
  right: pxtorem(@value);
}

.bottom(@value) {
  bottom: pxtorem(@value);
}

.border-radius(@value) {
  border-radius: pxtorem(@value);
}

.inline-block(@valign: top) {
  display: inline-block;
  vertical-align: @valign;
}

.colors(@fg: @color-default-fg, @bg: @color-default-bg) {
  color: @fg;
  background-color: @bg;
}

.border(@size, @type, @color) {
  border: pxtorem(@size) @type @color;
}

.border-top(@size, @type, @color) {
  border-top: pxtorem(@size) @type @color;
}

.box-shadow(@top, @right, @bottom, @left, @color) {
  box-shadow: pxtorem(@top) pxtorem(@right) pxtorem(@bottom) pxtorem(@left) @color;
}
