import fetch from 'isomorphic-fetch';
import _ from 'lodash';

const isServer = typeof self === 'undefined';

export function appendQueryString(url, queryString) {
  if (!queryString) {
    return url;
  }
  const joinWith = url.indexOf('?') != -1 ? '&' : '?';

  return `${url}${joinWith}${queryString}`;
}

function serialize(data) {
  const params = [];
  for (const param in data) {
    if (data.hasOwnProperty(param)) {
      const value = data[param];
      if (value != null) {
        const asString = _.isObject(value) ? JSON.stringify(value) : value;
        params.push(`${encodeURIComponent(param)}'='${encodeURIComponent(asString)}`);
      }
    }
  }
  return params.join('&');
}

function getAuthHeader() {
  const demoToken = process.env.DEMO_AUTH_TOKEN;

  return demoToken ? `Basic ${demoToken}` : void 0;
}

/* eslint-disable no-param-reassign */

export function request(method, uri, data) {
  const headers = {
    'Content-Type': 'application/json;charset=UTF-8',
    Authorization: getAuthHeader(),
  };

  const options = {
    method,
    headers,
  };

  if (data) {
    if (method.toUpperCase() === 'GET') {
      const queryString = serialize(data);
      if (queryString) {
        uri = appendQueryString(uri, queryString);
      }
    } else {
      options.body = JSON.stringify(data);
    }
  }

  let error = null;

  return fetch(uri, options)
    .then(response => {
      if (response.status < 200 || response.status >= 300) {
        error = new Error(response.statusText);
        error.response = response;
      }

      return response;
    })
    .then(response => response.text())
    .then(responseText => {
      let json = null;
      if (responseText) {
        try {
          json = JSON.parse(responseText);
        } catch (ex) {
          // invalid json
        }
      }

      if (error) {
        error.responseJson = json;
        throw error;
      }

      return json;
    });
}

/* eslint-enable no-param-reassign */

class Api {
  constructor(serverUri, clientPrefix = '') {
    this.serverUri = serverUri;
    this.clientPrefix = clientPrefix;
  }

  request(method, uri, ...args) {
    const prefix = isServer ? this.serverUri : this.clientPrefix;
    const finalUrl = `${prefix}${uri}`;

    return request(method, finalUrl, ...args);
  }

  get(...args) {
    return this.request('get', ...args);
  }

  post(...args) {
    return this.request('post', ...args);
  }
}

export const phoenix = new Api(process.env.PHOENIX_URL, '/api');
