
import _ from 'lodash';
import React, { Component } from 'react';
import styles from './autocomplete.css';
import cssModules from 'react-css-modules';
import { autobind } from 'core-decorators';
import scrollIntoView from 'dom-scroll-into-view';

import { TextInputWithLabel } from 'ui/inputs';

/* eslint react/sort-comp: 0 */

function matchStateToTerm(item, value) {
  return (
    this.getItemValue(item).toLowerCase().indexOf(value.toLowerCase()) !== -1
  );
}

type AutocompletePropTypes = {
  items: Array<any>,
  selectedItem: any;
  onChange?: Function;
  onSelect?: Function;
  shouldItemRender?: Function;
  renderItem?: Function;
  className?: string;
  inputProps: Object;
}

/* eslint-disable no-unused-vars */

const defaultProps = {
  items: [],
  inputProps: {},
  onChange() {},
  onSelect(item, value) {},
  renderMenu(items, value, style) {
    return <div className={styles.menu} style={style}>{items}</div>;
  },
  sortItems(a, b) {
    return this.getItemValue(a).toLowerCase() > this.getItemValue(b).toLowerCase() ? 1 : -1;
  },
  shouldItemRender: matchStateToTerm,
  getItemValue: item => item.value,
  getItemKey(item) {
    return this.getItemValue(item);
  },
  renderItem(item, isHighlighted) {
    const value = this.getItemValue(item);
    const key = this.getItemKey(item);

    return (
      <div
        className={styles[isHighlighted ? 'item-highlighted' : 'item']}
        key={key}
      >{value}</div>
    );
  },
};

/* eslint-enable no-unused-vars */

/* ::`*/
@cssModules(styles)
/* ::`*/
class Autocomplete extends Component {

  props: AutocompletePropTypes;

  static defaultProps = defaultProps;

  constructor(props, ...args) {
    super(props, ...args);

    this.state = {
      value: props.selectedItem ? props.getItemValue(props.selectedItem) : '',
      isOpen: false,
      highlightedIndex: null,
    };
  }

  componentWillMount() {
    this._ignoreBlur = false;
    this._performAutoCompleteOnUpdate = false;
    this._performAutoCompleteOnKeyUp = false;
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.selectedItem != this.props.selectedItem) {
      this.setState({
        value: this.props.getItemValue(nextProps.selectedItem),
      });
    }
    this._performAutoCompleteOnUpdate = true;
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.state.isOpen === true && prevState.isOpen === false) {
      this.setMenuPositions();
    }

    if (this.state.isOpen && this._performAutoCompleteOnUpdate) {
      this._performAutoCompleteOnUpdate = false;
      this.maybeAutoCompleteText();
    }

    if (!this.state.isOpen && this.state.changingStarted) {
      this.finishFiltering();
    }

    this.maybeScrollItemIntoView();
  }

  finishFiltering() {
    this.setState({
      changingStarted: false,
    }, () => {
      this.maybeSelectItem();
    });
  }

  maybeSelectItem() {
    const { items, selectedItem, getItemValue, onSelect } = this.props;

    const exactlyItem = _.find(items, item => {
      return getItemValue(item) == this.state.value;
    });

    if (exactlyItem) {
      onSelect(exactlyItem, this.state.value);
    } else {
      const item = selectedItem || items[0];
      if (item) {
        this.setState({
          value: getItemValue(item),
        });
      }
    }
  }

  maybeScrollItemIntoView() {
    if (this.state.isOpen && this.state.highlightedIndex !== null) {
      const itemNode = this.refs[`item-${this.state.highlightedIndex}`];
      if (itemNode) {
        const menuNode = this.refs.menu;

        scrollIntoView(itemNode, menuNode, { onlyScrollIfNeeded: true });
      }
    }
  }

  @autobind
  handleKeyDown(event) {
    if (this.keyDownHandlers[event.key]) {
      this.keyDownHandlers[event.key].call(this, event);
    } else {
      this.setState({
        highlightedIndex: null,
        isOpen: true,
      });
    }
  }

  @autobind
  handleChange(event) {
    event.stopPropagation();

    this._performAutoCompleteOnKeyUp = true;
    this.setState({
      value: event.target.value,
      changingStarted: true,
    }, () => {
      this.props.onChange(this.state.value);
    });
  }

  @autobind
  handleKeyUp() {
    if (this._performAutoCompleteOnKeyUp) {
      this._performAutoCompleteOnKeyUp = false;
      this.maybeAutoCompleteText();
    }
  }

  getInput() {
    return this.refs.container.querySelector('input');
  }

  get keyDownHandlers() {
    return {
      ArrowDown(event) {
        event.preventDefault();
        const { highlightedIndex } = this.state;
        const index = (
          highlightedIndex === null ||
          highlightedIndex === this.getFilteredItems().length - 1
        ) ? 0 : highlightedIndex + 1;
        this._performAutoCompleteOnKeyUp = true;
        this.setState({
          highlightedIndex: index,
          isOpen: true,
        });
      },
      ArrowUp(event) {
        event.preventDefault();
        const { highlightedIndex } = this.state;
        const index = (
          highlightedIndex === 0 ||
          highlightedIndex === null
        ) ? this.getFilteredItems().length - 1 : highlightedIndex - 1;
        this._performAutoCompleteOnKeyUp = true;
        this.setState({
          highlightedIndex: index,
          isOpen: true,
        });
      },
      Enter(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.state.isOpen === false) {
          // already selected this, do nothing
        } else if (this.state.highlightedIndex == null) {
          // hit enter after focus but before typing anything so no autocomplete attempt yet
          this.setState({
            isOpen: false,
          }, () => {
            this.getInput().select();
          });
        } else {
          const item = this.getFilteredItems()[this.state.highlightedIndex];

          this.setState({
            value: this.props.getItemValue(item),
            isOpen: false,
            highlightedIndex: null,
          }, () => {
            // this.getInput().focus() // TODO: file issue
            this.getInput().setSelectionRange(
              this.state.value.length,
              this.state.value.length
            );
            this.props.onSelect(item, this.state.value);
          });
        }
      },
      Escape() {
        this.setState({
          highlightedIndex: null,
          isOpen: false,
        });
      },
    };
  }

  getFilteredItems () {
    let items = this.props.items;

    if (this.props.shouldItemRender && this.state.changingStarted) {
      items = items.filter((item) => (
        this.props.shouldItemRender(item, this.state.value)
      ));
    }

    if (this.props.sortItems) {
      items.sort((a, b) => (
        this.props.sortItems(a, b, this.state.value)
      ));
    }

    return items;
  }

  maybeAutoCompleteText () {
    if (this.state.value === '') return;

    const { highlightedIndex } = this.state;
    const items = this.getFilteredItems();
    if (items.length === 0) return;

    const matchedItem = highlightedIndex !== null ?
      items[highlightedIndex] : items[0];
    const itemValue = this.props.getItemValue(matchedItem);
    const itemValueDoesMatch = (itemValue.toLowerCase().indexOf(
      this.state.value.toLowerCase()
    ) === 0);
    if (itemValueDoesMatch) {
      if (highlightedIndex === null) {
        this.setState({ highlightedIndex: 0 });
      }
    }
  }

  setMenuPositions () {
    const node = this.getInput();
    const rect = node.getBoundingClientRect();
    const computedStyle = getComputedStyle(node);
    const marginBottom = parseInt(computedStyle.marginBottom, 10);
    const marginLeft = parseInt(computedStyle.marginLeft, 10);
    const marginRight = parseInt(computedStyle.marginRight, 10);
    this.setState({
      menuTop: rect.bottom + marginBottom,
      menuLeft: rect.left + marginLeft,
      menuWidth: rect.width + marginLeft + marginRight,
    });
  }

  highlightItemFromMouse (index) {
    this.setState({ highlightedIndex: index });
  }

  selectItemFromMouse (item) {
    this.setState({
      value: this.props.getItemValue(item),
      isOpen: false,
      highlightedIndex: null,
    }, () => {
      this.props.onSelect(item, this.state.value);
      this.getInput().focus();
      this.setIgnoreBlur(false);
    });
  }

  setIgnoreBlur (ignore) {
    this._ignoreBlur = ignore;
  }

  renderMenu () {
    const items = this.getFilteredItems().map((item, index) => {
      const element = this.props.renderItem(
        item,
        this.state.highlightedIndex === index,
        {cursor: 'default'}
      );
      return React.cloneElement(element, {
        onMouseDown: () => this.setIgnoreBlur(true),
        onMouseEnter: () => this.highlightItemFromMouse(index),
        onClick: () => this.selectItemFromMouse(item),
        ref: `item-${index}`,
      });
    });
    const style = {
      left: this.state.menuLeft,
      top: this.state.menuTop,
      minWidth: this.state.menuWidth,
    };
    const menu = this.props.renderMenu(items, this.state.value, style);
    return React.cloneElement(menu, { ref: 'menu' });
  }

  @autobind
  handleInputBlur () {
    if (this._ignoreBlur) return;

    this.setState({
      isOpen: false,
      highlightedIndex: null,
    });
  }

  @autobind
  handleInputFocus () {
    if (this._ignoreBlur) return;

    this.setState({ isOpen: true });
  }

  @autobind
  handleInputClick () {
    if (this.state.isOpen === false) {
      this.setState({ isOpen: true });
    }
  }

  render () {
    const { inputProps, ...rest } = this.props;
    const restProps = _.omit(rest, Object.keys(defaultProps));

    return (
      <div ref="container" styleName="autocomplete" {...restProps}>
        <TextInputWithLabel
          label={this.state.isOpen ? '▲' : '▼'}
          type="text"
          {...inputProps}
          styleName="input"
          role="combobox"
          aria-autocomplete="both"
          onFocus={this.handleInputFocus}
          onBlur={this.handleInputBlur}
          onChange={this.handleChange}
          onKeyDown={this.handleKeyDown}
          onKeyUp={this.handleKeyUp}
          onClick={this.handleInputClick}
          value={this.state.value}
        />
        {this.state.isOpen && this.renderMenu()}
      </div>
    );
  }
}

export default Autocomplete;
