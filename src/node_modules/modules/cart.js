
/* @flow weak */

import _ from 'lodash';
import { createAction, createReducer } from 'redux-act';
import { phoenix } from 'lib/api';
import createAsyncActions from './async-utils';

export const toggleCart = createAction('TOGGLE_CART');
export const addToCart = createAction('ADD_TO_CART', (productId, quantity) => [productId, quantity]);

type ProductInCart = {
  skuId: number;
  quantity: number;
};

type FormData = {
  isVisible: boolean;
  skus: Array<ProductInCart>;
};

function fetchMyCart(): global.Promise {
  return phoenix.get(`/v1/my/cart`);
}

const {fetch, actions} = createAsyncActions('cart', fetchMyCart);

// add item to sku list
// TODO: call server to add it
function addToSkuList(items, id, quantity) {
  const found = _.find(items, {skuId: id});
  let result = [];
  if (_.isEmpty(found)) {
    const sku = {
      skuId: id,
      quantity,
    };
    result = items.concat([sku]);
  } else {
    const newFound = {...found, quantity: found.quantity + quantity};
    result = _.map(items, (item) => {
      return item.skuId === id ? newFound : item;
    });
  }
  return result;
}

const initialState: FormData = {
  isVisible: false,
  skus: [],
};

const reducer = createReducer({
  [toggleCart]: state => {
    const currentState = _.get(state, 'isVisible', false);
    return {
      ...state,
      isVisible: !currentState,
    };
  },
  [addToCart]: (state, [productId, quantity]) => {
    const skus = addToSkuList(state.skus, productId, quantity);
    return {
      ...state,
      skus,
    };
  },
  [actions.fetchSucceeded]: (state, payload) => {
    console.log(payload);
    return {
      ...state,
      product: payload,
    };
  },
}, initialState);

export {
  fetch,
  reducer as default,
};
