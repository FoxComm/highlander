
/* @flow weak */

import _ from 'lodash';
import { createAction, createReducer } from 'redux-act';
import { phoenix } from 'lib/api';
import createAsyncActions from './async-utils';

export const toggleCart = createAction('TOGGLE_CART');
export const changeCart = createAction('CHANGE_CART');

export type ProductInCart = {
  skuId: number;
  quantity: number;
  imagePath: string;
  referenceNumber: string;
  name: string;
  sku: string;
  price: number;
  quantity: number;
  totalPrice: number;
  state: string;
};

type FormData = {
  isVisible: boolean;
  subTotal: number;
  taxes: number;
  shipping: number;
  adjustments: number;
  total: number;
  skus: Array<ProductInCart>;
};

// reduce SKU list
function collectLineItems(skus) {
  const uniqueSkus = {};
  const items = _.transform(skus, (result, lineItem) => {
    const sku = lineItem.sku;
    if (_.isNumber(uniqueSkus[sku])) {
      const qty = result[uniqueSkus[sku]].quantity += 1; // eslint-disable-line no-param-reassign
      result[uniqueSkus[sku]].totalPrice = lineItem.price * qty; // eslint-disable-line no-param-reassign
    } else {
      uniqueSkus[sku] = result.length;
      result.push({ ...lineItem, quantity: 1 });
    }
  });
  return items;
}

// get line items from response
function getLineItems(payload) {
  const skus = _.get(payload, ['lineItems', 'skus'], []);
  const reducedSkus = collectLineItems(skus);
  return reducedSkus;
}

// collect items for submit
function collectItemsToSubmit(items) {
  return _.map(items, (item) => ({
    sku: item.sku,
    quantity: item.quantity,
  }));
}

// collect line items to submit change
function addToLineItems(items, id, quantity) {
  const toCollect = items.concat([{sku: id, quantity}]);
  return collectItemsToSubmit(toCollect);
}

function submitChange(payload) {
  return (dispatch, getState) => {
    const jwt = _.get(getState(), 'auth.jwt');
    return phoenix.addAuth(jwt).post('/v1/my/cart/line-items', payload).then(data => {
      dispatch(changeCart(data.result));
    });
  };
}

// add line item to cart
export function addLineItem(id, quantity) {
  return (dispatch, getState) => {
    const state = getState();
    const lineItems = _.get(state, ['cart', 'skus'], []);
    const newLineItems = addToLineItems(lineItems, id, quantity);
    return dispatch(submitChange(newLineItems));
  };
}

// remove item from cart
export function deleteLineItem(id) {
  return (dispatch, getState) => {
    const state = getState();
    const lineItems = _.get(state, ['cart', 'skus'], []);
    const newLineItems = _.map(lineItems, (item) => {
      const quantity = item.sku === id ? 0 : item.quantity;
      return {
        sku: item.sku,
        quantity,
      };
    });
    return dispatch(submitChange(newLineItems));
  };
}

function fetchMyCart(): global.Promise {
  return phoenix.get(`/v1/my/cart`);
}

const {fetch, actions} = createAsyncActions('cart', fetchMyCart);

const initialState: FormData = {
  isVisible: false,
  skus: [],
  subTotal: 0,
  taxes: 0,
  shipping: 0,
  adjustments: 0,
  total: 0,
};

const reducer = createReducer({
  [toggleCart]: state => {
    const currentState = _.get(state, 'isVisible', false);
    return {
      ...state,
      isVisible: !currentState,
    };
  },
  [changeCart]: (state, payload) => {
    const data = getLineItems(payload);
    const totals = _.get(payload, ['totals'], {});
    return {
      ...state,
      ...totals,
      skus: data,
    };
  },
  [actions.fetchSucceeded]: (state, payload) => {
    const data = getLineItems(payload);
    const totals = _.get(payload, ['totals'], {});
    return {
      ...state,
      ...totals,
      skus: data,
    };
  },
}, initialState);

export {
  fetch,
  reducer as default,
};
