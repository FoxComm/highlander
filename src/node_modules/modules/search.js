/* @flow */

import _ from 'lodash';
import { createReducer, createAction } from 'redux-act';
import createAsyncActions from './async-utils';
import { mockedData } from './products';
import type { Product } from './products';

export type Search = {
  term: string;
  results: Array<Product>;
}

const INITIAL_STATE: Search = {
  term: '',
  results: [],
};

/**
 * Generate search api call actions and reducer
 * Mocked for now
 */
function searchApiCall(searchString:?string): Promise {
  let result = mockedData;

  if (searchString != void 0) {
    result = _.filter(mockedData, (item) => _.includes(item.name, searchString));
  }

  return Promise.resolve(result);
}

const { fetch, actions: searchActions } = createAsyncActions('search', searchApiCall);

const setTerm = createAction('SET_TERM');


const reducer = createReducer({
  [searchActions.fetchSucceeded]: (state, payload) => {
    return {
      ...state,
      results: payload,
    };
  },
  [setTerm]: (state, payload) => {
    return {
      ...state,
      term: payload,
    };
  },
}, INITIAL_STATE);

const actions = {
  fetch,
  setTerm,
};

export {
  reducer as default,
  actions,
};
