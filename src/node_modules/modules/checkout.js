
/* @flow */

import _ from 'lodash';
import {createAction, createReducer} from 'redux-act';
import { assoc } from 'sprout-data';
import createAsyncActions from './async-utils';

export const AddressKind = {
  SHIPPING: 0,
  BILLING: 1,
};

export type AddressKindType = number;

export const EditStages = {
  SHIPPING: 0,
  DELIVERY: 1,
  BILLING: 2,
};

export type EditStage = number;

export type ShippingAddress = {
  city?: string;
}

export type CheckoutState = {
  editStage: EditStage;
  shippingAddress: ShippingAddress;
  billingAddress: ShippingAddress;
};

export type BillingData = {
  cardNumber?: string;
  month?: string;
  year?: string;
}

export const setEditStage = createAction('CHECKOUT_SET_EDIT_STAGE');
export const setBillingData = createAction('CHECKOUT_SET_BILLING_DATA', (key, value) => [key, value]);

export const setAddressData = createAction('CHECKOUT_SET_ADDRESS_DATA', (kind, key, value) => [kind, key, value]);

/* eslint-disable quotes, quote-props */

function _fetchShippingMethods() {
  return Promise.resolve([
    {
      "id": 1,
      "name": "7-10 DAY STANDARD",
      "price": 0,
      "isEnabled": true,
    },
    {
      "id": 2,
      "name": "2 DAY AIR",
      "price": 1500,
      "isEnabled": true,
    },
    {
      "id": 3,
      "name": "OVERNIGHT",
      "price": 4000,
      "isEnabled": true,
    },
  ]);
}

/* eslint-enable quotes, quote-props */

const shippingMethods = createAsyncActions('shipping-methods', _fetchShippingMethods);

export const fetchShippingMethods = shippingMethods.fetch;
export const selectShippingMethod = createAction('CHECKOUT_SET_SHIPPING_METHOD');
export const toggleSeparateBillingAddress = createAction('CHECKOUT_TOGGLE_BILLING_ADDRESS');

export function initAddressData(kind: AddressKindType): Function {
  return (dispatch, getState) => {
    const state = getState();

    const countries = state.countries.list;

    const usaCountry = _.find(countries, {alpha3: 'USA'});
    const countryDetails = state.countries.details[usaCountry && usaCountry.id] || {
      regions: [],
    };
    const firstRegion = countryDetails.regions[0];

    dispatch(setAddressData(kind, 'country', usaCountry));
    dispatch(setAddressData(kind, 'state', firstRegion));
  };
}

const shippingAddress = process.env.NODE_ENV == 'development' ? {
  address1: 'Some street 1456',
  name: 'home',
  country: {
    alpha3: 'USA',
    id: 234,
  },
  state: {
    name: 'Washington',
  },
  zip: 22222,
  city: 'Washington',
  phone: '77775777',
} : {};

const initialState: CheckoutState = {
  editStage: EditStages.BILLING,
  shippingAddress,
  billingAddress: {},
  billingData: {},
  billingAddressIsSame: true,
  shippingMethods: [],
};

const reducer = createReducer({
  [setEditStage]: (state, editStage: EditStage) => {
    return {
      ...state,
      editStage,
    };
  },
  [setAddressData]: (state, [kind, key, value]) => {
    const ns = kind == AddressKind.SHIPPING ? 'shippingAddress' : 'billingAddress';
    return assoc(state,
      [ns, key], value
    );
  },
  [setBillingData]: (state, [key, value]) => {
    return assoc(state,
      ['billingData', key], value
    );
  },
  [shippingMethods.actions.fetchSucceeded]: (state, list) => {
    return {
      ...state,
      shippingMethods: list,
    };
  },
  [toggleSeparateBillingAddress]: state => {
    return assoc(state,
      ['billingAddressIsSame'], !state.billingAddressIsSame
    );
  },
  [selectShippingMethod]: (state, shippingMethod) => {
    return {
      ...state,
      selectedShippingMethod: shippingMethod,
    };
  },
}, initialState);

export default reducer;
