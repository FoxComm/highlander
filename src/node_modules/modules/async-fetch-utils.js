
import _ from 'lodash';
import {createAction} from 'redux-act';

export default function createActionAsync(namespace, apiCall, options) {
  const payloadReducer = _.get(options, 'payloadReducer');
  const metaReducer = _.get(options, 'metaReducer');
  const namespacePrefix = namespace.toUpperCase();

  const actions = {
    fetchStarted: createAction(`${namespacePrefix}_FETCH_STARTED`, payloadReducer, metaReducer),
    fetchSucceeded: createAction(`${namespacePrefix}_FETCH_SUCCEEDED`, payloadReducer, metaReducer),
    fetchFailed: createAction(`${namespacePrefix}_FETCH_FAILED`, payloadReducer, metaReducer),
  };

  const fetch = (payload) => {
    return (dispatch) => {
      dispatch(actions.fetchStarted(payload));
      return apiCall(payload)
        .then(
          res => dispatch(actions.fetchSucceeded(res))
        ).catch(err => {
          dispatch(actions.fetchFailed(err));
          throw err;
        });
    };
  };

  const reducers = {
    fetchStarted: state => {
      return {
        ...state,
        isFetching: true,
        fetched: false,
      };
    },
    fetchSucceeded: (state, payload) => {
      return {
        ...state,
        list: payload,
        isFetching: false,
        fetched: true,
      };
    },
    fetchFailed: (state, err) => {
      console.error(err);

      return {
        ...state,
        isFetching: false,
        fetched: true,
      };
    },
  };

  const initialState = {
    isFetching: false,
    fetched: false,
    list: [],
  };

  return {
    fetch,
    reducers,
    actions,
    initialState,
  };
}
