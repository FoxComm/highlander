/* @flow */

import _ from 'lodash';
import {createAction} from 'redux-act';

export type InitialState = {
  isFetching: boolean;
  fetched: boolean;
  list: Array<any>;
}

export type Actions = {
  fetchStarted: Function;
  fetchSucceeded: Function;
  fetchFailed: Function;
}

export type AsyncAction = {
  fetch: Function;
  reducers: Actions;
  actions: Actions;
  initialState: InitialState;
}

export type ReduxOpts = {
  metaReducer: ?any;
  payloadReducer: ?any;
}

export default function createActionAsync(namespace: string, apiCall: Function, options: ?ReduxOpts): AsyncAction {
  const payloadReducer: any = _.get(options, 'payloadReducer');
  const metaReducer: any = _.get(options, 'metaReducer');
  const namespacePrefix = namespace.toUpperCase();

  const actions: Actions = {
    fetchStarted: createAction(`${namespacePrefix}_FETCH_STARTED`, payloadReducer, metaReducer),
    fetchSucceeded: createAction(`${namespacePrefix}_FETCH_SUCCEEDED`, payloadReducer, metaReducer),
    fetchFailed: createAction(`${namespacePrefix}_FETCH_FAILED`, payloadReducer, metaReducer),
  };

  const fetch = (payload) => {
    return (dispatch) => {
      dispatch(actions.fetchStarted(payload));
      return apiCall(payload)
        .then(
          res => dispatch(actions.fetchSucceeded(res))
        ).catch(err => {
          dispatch(actions.fetchFailed(err));
          throw err;
        });
    };
  };

  const reducers: Actions = {
    fetchStarted: state => {
      return {
        ...state,
        isFetching: true,
        fetched: false,
      };
    },
    fetchSucceeded: (state, payload) => {
      return {
        ...state,
        list: payload,
        isFetching: false,
        fetched: true,
      };
    },
    fetchFailed: (state, err) => {
      console.error(err);

      return {
        ...state,
        isFetching: false,
        fetched: true,
      };
    },
  };

  const initialState: InitialState = {
    isFetching: false,
    fetched: false,
    list: [],
  };

  return {
    fetch,
    reducers,
    actions,
    initialState,
  };
}
