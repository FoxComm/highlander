/* @flow */

import { createReducer } from 'redux-act';

import createAsyncActions from './async-utils';

type Attribute = {
  t: string,
  v: any,
};

type Attributes = { [key:string]: Attribute };

type BakedProduct = {
  id: number,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type BakedSku = {
  code: string,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type Context = {
  name: string,
  attributes: { [key:string]: string },
};

export type ProductResponse = {
  id: number,
  context: Context,
  product: BakedProduct,
  skus: Array<BakedSku>,
};

function fetchProduct(id: number): global.Promise {
  return this.phoenix.get(`/v1/public/products/${id}`);
}

const {fetch, actions} = createAsyncActions('pdp', fetchProduct);

const initialState = {
  product: null,
};

const reducer = createReducer({
  [actions.fetchSucceeded]: (state, payload) => {
    return {
      ...state,
      product: payload,
    };
  },
}, initialState);

export {
  fetch,
  reducer as default,
};
