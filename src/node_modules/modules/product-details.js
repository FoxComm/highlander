/* @flow */

import _ from 'lodash';
import { createAction, createReducer } from 'redux-act';

const fetchStarted = createAction('PRODUCT_DETAILS_FETCH_STARTED');
const fetchSucceeded = createAction('PRODUCT_DETAILS_FETCH_SUCCEEDED');
const fetchFailed = createAction('PRODUCT_DETAILS_FETCH_FAILED');

type Attribute = {
  t: string,
  v: any,
};

type Attributes = { [key:string]: Attribute };

type BakedProduct = {
  id: number,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type BakedSku = {
  code: string,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type Context = {
  name: string,
  attributes: { [key:string]: string },
};

export type ProductResponse = {
  id: number,
  context: Context,
  product: BakedProduct,
  skus: Array<BakedSku>,
};

export const mockedData: Array<ProductResponse> = [
  {
    id: 1,
    context: {
      name: 'default',
      attributes: {
        language: 'EN',
        modality: 'desktop',
      },
    },
    product: {
      id: 1,
      attributes: {
        title: {
          t: 'string',
          v: 'Flonkeeeeeeh',
        },
        images: {
          t: 'images',
          v: [
            'http://lorempixel.com/75/75/fashion/',
          ],
        },
        description: {
          t: 'string',
          v: 'Best in Class Flonkey',
        },
      },
      variants: {
        default: {},
      },
      skus: {
        default: {
          'SKU-YAX': {},
        },
      },
      activeFrom: '2016-03-14T18:18:47.187Z',
    },
    skus: [
      {
        code: 'SKU-YAX',
        attributes: {
          price: {
            t: 'price',
            v: {
              value: 3300,
              currency: 'USD',
            },
          },
          title: {
            t: 'string',
            v: 'Flonkey',
          },
        },
        activeFrom: '2016-03-14T18:18:47.231Z',
      },
    ],
  },
];

export function fetchProduct(id: number): Function {
  return dispatch => {
    dispatch(fetchStarted());
    const result = _.find(mockedData, { id });
    dispatch(fetchSucceeded(result));
  };
}

const initialState = {
  isFetching: false,
  product: null,
};

const reducer = createReducer({
  [fetchStarted]: state => {
    return {
      ...state,
      isFetching: true,
    };
  },
  [fetchSucceeded]: (state, payload) => {
    return {
      ...state,
      product: payload,
      isFetching: false,
    };
  },
  [fetchFailed]: (state, err) => {
    console.error(err);

    return {
      ...state,
      isFetching: false,
    };
  },
}, initialState);

export default reducer;
