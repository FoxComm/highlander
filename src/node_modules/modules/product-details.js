/* @flow */

import { createAction, createReducer } from 'redux-act';
import fetch from 'isomorphic-fetch';

const fetchStarted = createAction('PRODUCT_DETAILS_FETCH_STARTED');
const fetchSucceeded = createAction('PRODUCT_DETAILS_FETCH_SUCCEEDED');
const fetchFailed = createAction('PRODUCT_DETAILS_FETCH_FAILED');

type Attribute = {
  t: string,
  v: any,
};

type Attributes = { [key:string]: Attribute };

type BakedProduct = {
  id: number,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type BakedSku = {
  code: string,
  attributes: Attributes,
  activeFrom?: string,
  activeTo?: string,
};

type Context = {
  name: string,
  attributes: { [key:string]: string },
};

export type ProductResponse = {
  id: number,
  context: Context,
  product: BakedProduct,
  skus: Array<BakedSku>,
};

export function fetchProduct(id: number): Function {
  return dispatch => {
    dispatch(fetchStarted());
    return fetch(`/api/v1/public/products/${id}`)
      .then(
        resp => {
          resp.json().then(res => dispatch(fetchSucceeded(res)));
        },
        err => fetchFailed(err)
      );
  };
}

const initialState = {
  isFetching: false,
  product: null,
};

const reducer = createReducer({
  [fetchStarted]: state => {
    return {
      ...state,
      isFetching: true,
    };
  },
  [fetchSucceeded]: (state, payload) => {
    return {
      ...state,
      product: payload,
      isFetching: false,
    };
  },
  [fetchFailed]: (state, err) => {
    console.error(err);

    return {
      ...state,
      isFetching: false,
    };
  },
}, initialState);

export default reducer;
