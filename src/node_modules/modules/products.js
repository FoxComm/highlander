/* @flow */

import { createReducer } from 'redux-act';
import createAsyncActions from './async-utils';
import { api } from 'lib/api';
import _ from 'lodash';

export type Product = {
  id: number;
  context: string,
  title: string;
  description: string,
  images: Array<string>,
}

function tagPayload(tag: string): Object {
  return {
    query: {
      bool: {
        filter: [{
          term: {
            tags: tag,
          },
        }],
      },
    },
  };
}

function apiCall(tag: ?string): global.Promise {
  if (tag) {
    return api.post('/search/products_catalog_view/_search', tagPayload(tag));
  }

  return api.get('/search/products_catalog_view/_search');
}

const {fetch, ...actions} = createAsyncActions('products', apiCall);

const reducer = createReducer({
  [actions.fetchSucceeded]: (state, payload) => {
    const result = _.isEmpty(payload.result) ? [] : payload.result;
    return {
      ...state,
      list: result,
    };
  },
}, {list: []});

export {
  reducer as default,
  fetch,
};
