import _ from 'lodash';
import { assoc } from 'sprout-data';
import { createAction } from 'redux-act';
import { api } from 'lib/api';

export function reducer(state = {}, action) {
  const kind = _.get(action, 'meta.kind');
  if (kind == 'async') {
    const { type, namespace } = action.meta;
    switch (type) {
      case 'started':
        return assoc(state,
          [namespace, 'inProgress'], true,
          [namespace, 'finished'], false,
          [namespace, 'failed'], false
        );
      case 'succeeded':
        return assoc(state,
          [namespace, 'inProgress'], false,
          [namespace, 'finished'], true,
          [namespace, 'failed'], false
        );
      case 'failed':
        return assoc(state,
          [namespace, 'inProgress'], false,
          [namespace, 'finished'], true,
          [namespace, 'failed'], true
        );
      default:
        return state;
    }
  }
  return state;
}

function createAsyncAction(namespace, type, payloadReducer) {
  const description = `${namespace.toUpperCase()}_${type.toUpperCase()}`;
  return createAction(description, payloadReducer, () => ({
    kind: 'async',
    namespace,
    type,
  }));
}

const isServer = typeof self == 'undefined';

export default function createAsyncActions(namespace, asyncCall, payloadReducer) {
  const actions = {
    fetchStarted: createAsyncAction(namespace, 'started', payloadReducer),
    fetchSucceeded: createAsyncAction(namespace, 'succeeded', payloadReducer),
    fetchFailed: createAsyncAction(namespace, 'failed', payloadReducer),
  };

  /* eslint-disable consistent-return */

  // @TODO! think about cancelling request on client side
  // for example in navigate to product 1, then to 2, then back to 1 and there user will see
  // not last navigated product, but product for which response will be last

  const fetch = (...args) => {
    return (dispatch, getState, jwt) => {
      const apiContext = {
        jwt,
        phoenix: api.addAuth(jwt),
      };

      dispatch(actions.fetchStarted(...args));
      return asyncCall.call(apiContext, ...args)
        .then(
          res => dispatch(actions.fetchSucceeded(res))
        ).catch(err => {
          console.error(err && err.stack);
          dispatch(actions.fetchFailed(err));
        });
    };
  };

  const lazyFetch = (...args) => {
    let promise;

    return (dispatch, getState) => {
      const asyncState = _.get(getState(), ['asyncActions', namespace]);
      if (asyncState && isServer && (asyncState.inProgress || asyncState.finished)) {
        return promise;
      }

      promise = dispatch(fetch(...args));
      return promise;
    };
  };

  /* eslint-enable consistent-return */

  return {
    fetch: lazyFetch,
    ...actions,
  };
}
