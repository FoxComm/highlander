user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 768;
  # multi_accept on;
}


http {

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # don't send the nginx version number ever because security
  server_tokens off;

  # cache credentials to speed up TLS
  ssl_session_cache shared:SSL:20m;
  ssl_session_timeout 180m;

  # Dropping SSLv3, ref: POODLE
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # enables server-side protection from BEAST attacks
  # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
  ssl_prefer_server_ciphers on;

  # ciphers chosen for forward secrecy and compatibility
  # http://blog.iva://192.168.10.1:4000/nristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
  ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

  #TODO TLS
  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  #add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  gzip on;
  gzip_disable "msie6";

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;

  #TODO TLS
  # redirect all http -> https
  #server {
  #  listen 80 default_server;
  #  listen [::]:80 default_server;
  #  return 301 https://$host$request_uri;
  #}

  map $host $request_time_ms { default ''; }
  map $host $uuid { default ''; }

  ###############################
  # Setup unique id per request #
  ###############################

  lua_package_path '/etc/nginx/?.lua;;';
  init_by_lua '
      cjson = require "cjson"
      uuid4 = require "uuid4"
      math = require "math"

      function map(array, func)
        local new_array = {}
        for i,v in ipairs(array) do
        new_array[i] = func(v)
        end
        return new_array
      end

      function request_internal_search()
        local uri = ngx.re.sub(ngx.var.uri, "api/search", "internal-search")
        local req = uri
        if not ngx.var.args == nil then
        req = uri .. "?" .. ngx.var.args
        end

        -- map is needed because ngx.var.request_method returns a string
        local methodsMap = {
            GET = ngx.HTTP_GET,
            POST = ngx.HTTP_POST,
            PUT = ngx.HTTP_PUT,
            DELETE = ngx.HTTP_DELETE
        }

        local body = ngx.req.read_body()
        local method = methodsMap[ngx.var.request_method]

        --get json result from elastic search
        return ngx.location.capture(req, { method = method,  body = body })
      end
      ';

  log_by_lua '
      ngx.var.request_time_ms = math.floor(tonumber(ngx.var.request_time) * 1000)
      ';

  log_format phoenixformat '[$time_local] "$request" $status $request_length $bytes_sent $request_time_ms $uuid';
  access_log /var/log/nginx/access.log phoenixformat;
}
