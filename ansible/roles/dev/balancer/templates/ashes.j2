upstream ashes {
    server {{ ashes_server }} fail_timeout=15s;
}

server {
  # TODO(jpfuentes2): enable me when we have nginx + lua + HTTP2
  # listen 443 ssl http2 default_server;
  #ssl_certificate    server.crt;
  #ssl_certificate_key server.key;

  listen 80;
  listen [::]:80;

  index index.html;

  server_name {{ashes_server_name}};

  error_page 500 @500;
  error_page 502 @502;
  error_page 503 @503;
  error_page 504 @504;

  # Create unique UUID to track each request
  set_by_lua $uuid '
      if ngx.var.http_x_request_id == nil then
          return uuid4.getUUID()
      else
          return ngx.var.http_x_request_id
      end
  ';

  # Proxy to ElasticSearch phoenix index for internal use by /api/search
  location /internal-search-admin/ {
      internal;
      proxy_pass http://search/admin/;
  }

  location /internal-search-public/ {
      internal;
      proxy_pass http://search/public/;
  }

  # Proxy the internal search location and sanitizes output from ES for external use
  location ~ /api/search/admin/.*/_search {
        default_type 'application/json';
        content_by_lua '

            --forward to internal es
            local json = request_internal_search("admin")

            -- we need only _source filed from the hits
            json.hits.result = map(json.hits.hits, function(hit)
                return hit._source
            end)
            json.hits.pagination = {total = json.hits.total}
            json.hits.hits = nil
            json.hits.total = nil

            -- add aggregations to response
            json.hits.aggregations = json.aggregations

            --only show hits
            --TODO handle error better if hits is undefined.
            ngx.say(j.encode(json.hits))
      ';
      break;
  }

  # Proxy the internal search location and sanitizes output from ES for external use
  location ~ /api/search/admin/.*/_count {
        default_type 'application/json';
        content_by_lua '

            --forward to internal es
            local json = request_internal_search("admin")

            --remove shards
            json._shards = nil

            --only show count
            ngx.say(j.encode(json))
      ';
      break;
  }

  # Proxy the internal search location and sanitizes output from ES for external use
  location ~ /api/search/admin/.*/\d+$ {
        default_type 'application/json';
        content_by_lua '

            --forward to internal es
            local json = request_internal_search("admin")

            if json.found == true then
                --only show _source
                json = json._source

                ngx.say(j.encode(json))
            else
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header["Content-type"] = "application/json"
                json = { found = false}
                ngx.say(j.encode(json))
            end
      ';
      break;
  }


  # Proxy to phoenix and use basic auth.
  location /api/v1/public/ {
      proxy_pass http://phoenix/v1/public/;
      proxy_hide_header Authorization;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      break;
  }

  location /api/v1/my/ {
      proxy_pass http://phoenix/v1/my/;
      proxy_pass_header Authorization;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      break;
  }

  location /api/ {
      proxy_pass http://phoenix/;
      proxy_pass_header Authorization;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      break;
  }

  # Proxy SSE stream to phoenix.
  location /sse/ {
      proxy_pass http://phoenix/;

      proxy_pass_header Authorization;
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      chunked_transfer_encoding off;
      proxy_buffering off;
      proxy_cache off;
  }

  # Proxy to ashes
  location / {
      root {{ashes_root_dir}};
      try_files $uri @ashes;
  }

  location @ashes {
      proxy_pass http://ashes;
  }

  # Error pages
  location @500 {
    if ($http_content_type ~ .*json.*) {
      more_set_headers 'Content-Type: application/json charset=UTF-8';
      return 500 '{"code": 500, "reason": "Internal Server Error"}';
    }
  }

  location @502 {
    if ($http_content_type ~ .*json.*) {
      more_set_headers 'Content-Type: application/json charset=UTF-8';
      return 502 '{"code": 502, "reason": "Bad gateway"}';
    }
  }

  location @503 {
    if ($http_content_type ~ .*json.*) {
      more_set_headers 'Content-Type: application/json charset=UTF-8';
      return 503 '{"code": 503, "reason": "Service Unavailable"}';
    }
  }

  location @504 {
    if ($http_content_type ~ .*json.*) {
      more_set_headers 'Content-Type: application/json charset=UTF-8';
      return 504 '{"code": 504, "reason": "Gateway timeout"}';
    }
  }
}
